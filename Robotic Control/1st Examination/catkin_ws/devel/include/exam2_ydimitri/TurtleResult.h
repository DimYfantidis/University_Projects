// Generated by gencpp from file exam2_ydimitri/TurtleResult.msg
// DO NOT EDIT!


#ifndef EXAM2_YDIMITRI_MESSAGE_TURTLERESULT_H
#define EXAM2_YDIMITRI_MESSAGE_TURTLERESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exam2_ydimitri
{
template <class ContainerAllocator>
struct TurtleResult_
{
  typedef TurtleResult_<ContainerAllocator> Type;

  TurtleResult_()
    : elapsed_time()  {
    }
  TurtleResult_(const ContainerAllocator& _alloc)
    : elapsed_time()  {
  (void)_alloc;
    }



   typedef ros::Duration _elapsed_time_type;
  _elapsed_time_type elapsed_time;





  typedef boost::shared_ptr< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> const> ConstPtr;

}; // struct TurtleResult_

typedef ::exam2_ydimitri::TurtleResult_<std::allocator<void> > TurtleResult;

typedef boost::shared_ptr< ::exam2_ydimitri::TurtleResult > TurtleResultPtr;
typedef boost::shared_ptr< ::exam2_ydimitri::TurtleResult const> TurtleResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exam2_ydimitri::TurtleResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::exam2_ydimitri::TurtleResult_<ContainerAllocator1> & lhs, const ::exam2_ydimitri::TurtleResult_<ContainerAllocator2> & rhs)
{
  return lhs.elapsed_time == rhs.elapsed_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::exam2_ydimitri::TurtleResult_<ContainerAllocator1> & lhs, const ::exam2_ydimitri::TurtleResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace exam2_ydimitri

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e3d6f1eb13c6d1493c23dbce73b8e5f";
  }

  static const char* value(const ::exam2_ydimitri::TurtleResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e3d6f1eb13c6d14ULL;
  static const uint64_t static_value2 = 0x93c23dbce73b8e5fULL;
};

template<class ContainerAllocator>
struct DataType< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exam2_ydimitri/TurtleResult";
  }

  static const char* value(const ::exam2_ydimitri::TurtleResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"duration elapsed_time\n"
;
  }

  static const char* value(const ::exam2_ydimitri::TurtleResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.elapsed_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TurtleResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exam2_ydimitri::TurtleResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exam2_ydimitri::TurtleResult_<ContainerAllocator>& v)
  {
    s << indent << "elapsed_time: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.elapsed_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXAM2_YDIMITRI_MESSAGE_TURTLERESULT_H
